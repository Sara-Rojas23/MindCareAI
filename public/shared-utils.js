// üîß MindCare AI - Utilidades Compartidas
// Funciones reutilizables entre diferentes m√≥dulos

/**
 * Obtiene el emoji correspondiente a una emoci√≥n
 * @param {string} emotion - Nombre de la emoci√≥n en espa√±ol o ingl√©s
 * @returns {string} - Emoji representativo
 */
function getEmotionEmoji(emotion) {
    if (!emotion) return 'üé≠';
    
    const emotionLower = emotion.toLowerCase();
    
    const emojis = {
        // Espa√±ol
        'alegr√≠a': 'üòä',
        'tristeza': 'üò¢',
        'enojo': 'üò†',
        'miedo': 'üò®',
        'sorpresa': 'üò≤',
        'disgusto': 'üòñ',
        'ansiedad': 'üò∞',
        'estr√©s': 'üòì',
        'calma': 'üòå',
        'nostalgia': 'ü•∫',
        // Ingl√©s
        'joy': 'üòä',
        'happiness': 'üòÑ',
        'sadness': 'üò¢',
        'anger': 'üò†',
        'fear': 'üò®',
        'surprise': 'üò≤',
        'love': '‚ù§Ô∏è',
        'neutral': 'üòê',
        'anxiety': 'üò∞',
        'stress': 'üòì',
        'disgust': 'üòñ',
        'calm': 'üòå'
    };
    
    return emojis[emotionLower] || 'üé≠';
}

/**
 * Formatea una fecha en espa√±ol
 * @param {string|Date} dateString - Fecha a formatear
 * @param {boolean} includeTime - Si incluir hora y minutos
 * @returns {string} - Fecha formateada
 */
function formatDate(dateString, includeTime = true) {
    const date = new Date(dateString);
    const options = {
        day: '2-digit',
        month: 'short',
        year: 'numeric'
    };
    
    if (includeTime) {
        options.hour = '2-digit';
        options.minute = '2-digit';
    }
    
    return date.toLocaleDateString('es-ES', options);
}

/**
 * Obtiene clase CSS seg√∫n nivel de confianza
 * @param {number} confidence - Porcentaje de confianza (0-100)
 * @returns {string} - Nombre de clase CSS
 */
function getConfidenceClass(confidence) {
    const conf = Math.round(confidence);
    if (conf >= 80) return 'confidence-high';
    if (conf >= 60) return 'confidence-medium';
    return 'confidence-low';
}

/**
 * Verifica si el usuario est√° autenticado
 * @returns {boolean} - True si hay token y datos de usuario
 */
function isAuthenticated() {
    const token = localStorage.getItem('mindcare_token');
    const user = localStorage.getItem('mindcare_user');
    return !!(token && user);
}

/**
 * Obtiene datos del usuario desde localStorage
 * @returns {Object|null} - Datos del usuario o null si hay error
 */
function getUserData() {
    try {
        const userStr = localStorage.getItem('mindcare_user');
        return userStr ? JSON.parse(userStr) : null;
    } catch (e) {
        console.error('‚ùå Error parseando datos de usuario:', e);
        return null;
    }
}

/**
 * Trunca texto a una longitud m√°xima
 * @param {string} text - Texto a truncar
 * @param {number} maxLength - Longitud m√°xima
 * @returns {string} - Texto truncado con "..." si excede
 */
function truncateText(text, maxLength = 150) {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

console.log('‚úÖ Utilidades compartidas cargadas');
